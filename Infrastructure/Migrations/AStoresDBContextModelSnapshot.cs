// <auto-generated />
using ApplicationCore.Entities;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AStoresDBContext))]
    partial class AStoresDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ApplicationCore.Entities.CatalogType", b =>
                {
                    b.Property<Guid>("F_Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("F_FullName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("F_LastModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("F_Id");

                    b.ToTable("FM_ProductCarategory");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Customer", b =>
                {
                    b.Property<Guid>("F_Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("F_Account")
                        .HasMaxLength(50);

                    b.Property<string>("F_Address")
                        .HasMaxLength(100);

                    b.Property<string>("F_FirstName")
                        .IsRequired();

                    b.Property<DateTime>("F_LastModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("F_LastName")
                        .IsRequired();

                    b.Property<string>("F_MobilePhone")
                        .HasMaxLength(15);

                    b.Property<int>("F_Sex");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("F_Id");

                    b.ToTable("FM_Customer");
                });

            modelBuilder.Entity("ApplicationCore.Entities.OrderItem", b =>
                {
                    b.Property<Guid>("F_Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newid()");

                    b.Property<DateTime>("F_LastModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<decimal>("F_LineTotal")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasComputedColumnSql("(isnull(([F_Price]*[F_Quantity]),(0.0)))");

                    b.Property<decimal>("F_Price");

                    b.Property<Guid>("F_ProductId");

                    b.Property<float>("F_Quantity");

                    b.Property<Guid>("F_SalesOrderId");

                    b.Property<Guid>("OrderItemStatusId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("F_Id");

                    b.HasIndex("F_ProductId");

                    b.HasIndex("F_SalesOrderId");

                    b.HasIndex("OrderItemStatusId");

                    b.ToTable("FM_OrderItem");
                });

            modelBuilder.Entity("ApplicationCore.Entities.OrderItemStatus", b =>
                {
                    b.Property<Guid>("F_Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newid()");

                    b.Property<DateTime>("F_LastModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("F_OrderItemStatus")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("F_Id");

                    b.ToTable("FM_OrderItemsStatus");
                });

            modelBuilder.Entity("ApplicationCore.Entities.OrderStatus", b =>
                {
                    b.Property<Guid>("F_Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newid()");

                    b.Property<DateTime>("F_LastModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("F_OrderStatus")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("F_Id");

                    b.ToTable("FM_OrderStatus");
                });

            modelBuilder.Entity("ApplicationCore.Entities.PaymentMethod", b =>
                {
                    b.Property<Guid>("F_Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newid()");

                    b.Property<DateTime>("F_LastModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("F_PaymentName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("F_Id");

                    b.ToTable("FM_Paymentmethods");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Product", b =>
                {
                    b.Property<Guid>("F_Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newid()");

                    b.Property<Guid>("CatalogId");

                    b.Property<string>("F_EnCode")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.Property<string>("F_FullName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<decimal>("F_GuidePrice");

                    b.Property<string>("F_ImageUrl1")
                        .HasMaxLength(100);

                    b.Property<DateTime>("F_LastModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<decimal>("F_SalePrice");

                    b.Property<decimal>("F_StandardCost");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("F_Id");

                    b.HasIndex("CatalogId");

                    b.ToTable("FM_Products");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ProductChanges", b =>
                {
                    b.Property<Guid>("F_Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newid()");

                    b.Property<DateTime>("F_LastModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<decimal>("F_NewPrice");

                    b.Property<Guid>("F_ProductId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("F_Id");

                    b.HasIndex("F_ProductId");

                    b.ToTable("FM_ProductChanges");
                });

            modelBuilder.Entity("ApplicationCore.Entities.SalesOrder", b =>
                {
                    b.Property<Guid>("F_Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newid()");

                    b.Property<Guid>("CustomerId");

                    b.Property<DateTime>("F_LastModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime>("F_OrderDate");

                    b.Property<string>("F_OrderNumber")
                        .IsRequired();

                    b.Property<DateTime>("F_PayDate");

                    b.Property<decimal>("F_SubTotal");

                    b.Property<decimal>("F_TaxAmt");

                    b.Property<decimal>("F_TotalDue")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasComputedColumnSql("(isnull(([F_SubTotal]+[F_TaxAmt]),(0.0)))");

                    b.Property<Guid>("OrderStatusId");

                    b.Property<Guid>("PaymentMethodId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("F_Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("FM_SalesOrder");
                });

            modelBuilder.Entity("ApplicationCore.Entities.OrderItem", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("F_ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.SalesOrder", "SalesOrder")
                        .WithMany("OrderItems")
                        .HasForeignKey("F_SalesOrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.OrderItemStatus", "F_OrderItemStatus")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderItemStatusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationCore.Entities.Product", b =>
                {
                    b.HasOne("ApplicationCore.Entities.CatalogType", "CatalogType")
                        .WithMany("Products")
                        .HasForeignKey("CatalogId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationCore.Entities.ProductChanges", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Product", "Product")
                        .WithMany("PriceChanges")
                        .HasForeignKey("F_ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationCore.Entities.SalesOrder", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Customer", "Customer")
                        .WithMany("SalesOrders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.OrderStatus", "OrderStatus")
                        .WithMany("SalesOrders")
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("SalesOrders")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
